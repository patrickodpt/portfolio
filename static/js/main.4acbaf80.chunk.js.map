{"version":3,"sources":["Components/Resume.pdf","Components/Resume.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Transition","React","forwardRef","props","ref","Slide","direction","AlertDialogSlide","useState","open","setOpen","handleClose","Button","onClick","style","stylesProp","color","Dialog","TransitionComponent","keepMounted","onClose","scroll","fullWidth","maxWidth","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","width","src","resumePDF","height","DialogActions","github","require","styles","GridItem","display","justifyContent","EmbiggenedIcon","padding","margin","TypoBox","alignItems","alignSelf","GithubIcon","SvgIcon","d","path","Home","state","resumeIsOpen","Grid","container","justify","item","xs","Box","boxShadow","Typography","variant","fontWeight","textAlign","textShadow","backgroundColor","Link","href","target","Component","console","log","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4acbaf80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Resume.88fae53c.pdf\";","import React, { Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport resumePDF from './Resume.pdf'\nimport DescriptionIcon from '@material-ui/icons/Description';\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide(props) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Fragment>\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Slide in alert dialog\n      </Button> */}\n      <Button onClick={handleClickOpen}>\n        <DescriptionIcon\n          style={props.stylesProp}\n          color=\"action\" />\n      </Button>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        scroll=\"body\"\n        // fullScreen={true}\n        fullWidth={true}\n        maxWidth=\"lg\"\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{\"Resume\"}</DialogTitle>\n        <DialogContent\n          width=\"100%\"\n          >\n            <iframe\n              src={resumePDF}\n              width=\"100%\"\n              height=\"800\"\n              >\n              This browser does not support PDFs. Please download the PDF to view it: Download PDF\n            </iframe>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  );\n}\n","import React, { Component } from 'react';\n// import MyHeader from './Header.js'\nimport MyResume from './Resume.js'\nimport { Box, Grid, Typography, Link, Button } from '@material-ui/core';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport EmailIcon from '@material-ui/icons/Email';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport DescriptionIcon from '@material-ui/icons/Description';\nconst github = require('simple-icons/icons/github');\n\nconst styles = {\n  GridItem: {\n    height: '33vh',\n    color: 'white',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  EmbiggenedIcon: {\n    width: '100px',\n    height: '100px',\n    padding: '5px',\n    margin: '10px',\n  },\n  TypoBox: {\n    alignItems: 'center',\n    display: 'flex',\n    alignSelf: 'start',\n  }\n}\n\nfunction GithubIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <path d={github.path}/>\n    </SvgIcon>\n  )\n}\n\nclass Home extends Component {\n  state = {\n    resumeIsOpen: false,\n  }\n\n  render() {\n    return (\n      <Grid container justify=\"space-around\">\n        {/* <MyHeader/> */}\n        <Grid item xs={12} style={styles.GridItem} alignItems='flex-end'>\n          <Box boxShadow={3}>\n            <Typography variant='h1'\n              style={{\n                fontWeight: 500,\n                textAlign: 'center',\n                textShadow: '2px 4px black',\n                backgroundColor: '#00000073',\n                }}>\n              PATRICK O'SHEA\n            </Typography>\n          </Box>\n        </Grid>\n        <Grid item xs={12} style={styles.GridItem} alignItems='flex-start'>\n          <Box boxShadow={2}>\n            <Typography variant='h5'\n              style={{\n                fontWeight: 300,\n                textAlign: 'center',\n                textShadow: '2px 4px black',\n                backgroundColor: '#00000073',\n                }}>\n              Software Developer // Physical Therapist\n            </Typography>\n          </Box>\n        </Grid>\n        <Grid item xs={12} style={styles.GridItem}  alignItems='center'>\n          <Typography style={styles.TypoBox}>\n            <Link\n              href=\"https://www.linkedin.com/in/patrickodpt/\"\n              target=\"_blank\"\n              >\n              <LinkedInIcon\n                style={styles.EmbiggenedIcon}\n                color=\"action\" />\n            </Link>\n            <Link\n              href=\"https://github.com/patrickodpt\"\n              target=\"_blank\">\n              <GithubIcon\n                color=\"action\"\n                style={styles.EmbiggenedIcon}\n              />\n            </Link>\n            <Link\n              href=\"mailto:patrickodpt@gmail.com\"\n              >\n              <EmailIcon\n                style={styles.EmbiggenedIcon}\n                color=\"action\" />\n            </Link>\n            <MyResume stylesProp={styles.EmbiggenedIcon}/>\n          </Typography>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default Home;\n","import React, { Fragment } from 'react';\nimport { CssBaseline } from '@material-ui/core'\nimport Home from './Components/Home.js'\nimport './App.css';\n\nconsole.log(\"HEY! If you're looking at this you probably know about a decent job for an entry level developer. If so, hit me up on linkedIn. :)\");\n\nfunction App() {\n  return (\n    <Fragment>\n      <CssBaseline/>\n      <Home/>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}